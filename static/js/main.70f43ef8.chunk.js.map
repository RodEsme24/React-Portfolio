{"version":3,"sources":["components/Homepage/esme.jpg","logo.svg","components/Header.js","components/Homepage/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Navbar","bg","variant","Brand","href","Nav","className","Link","Homepage","Container","Row","Col","sm","src","logo","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,kC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,yJCsB1BC,MApBjB,WACI,OACF,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,uBACA,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUH,KAAK,SAAf,YACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,aAAf,aACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,YAAf,WACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,YAAf,UACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,YAAf,YACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,YAAf,a,+CCKSI,MAbf,WACI,OACJ,kBAACC,EAAA,EAAD,CAAWH,UAAU,2BACnB,kBAACI,EAAA,EAAD,CAAKJ,UAAU,iCACb,kBAACK,EAAA,EAAD,CAAKC,GAAI,GAAT,IAAa,yBAAKC,IAAKC,IAAMC,IAAI,UAAUT,UAAU,eACrD,kBAACK,EAAA,EAAD,CAAKC,GAAI,EAAGN,UAAU,OAAtB,ooB,MCUWU,MAXf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.70f43ef8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/esme.6c167ec7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Button, Navbar, Nav,Form, FormControl } from 'react-bootstrap';\nfunction Header() {\n    return (\n  <Navbar bg=\"dark\" variant=\"dark\">\n    <Navbar.Brand href=\"#home\">Esmeralda Rodriguez</Navbar.Brand>\n    <Nav className=\"mr-auto\">\n      <Nav.Link href=\"#home\">About Me</Nav.Link>\n      <Nav.Link href=\"#features\">Portfolio</Nav.Link>\n      <Nav.Link href=\"#pricing\">Contact</Nav.Link>\n      <Nav.Link href=\"#pricing\">Github</Nav.Link>\n      <Nav.Link href=\"#pricing\">LinkedIn</Nav.Link>\n      <Nav.Link href=\"#pricing\">Resume</Nav.Link>\n    </Nav>\n    \n  </Navbar>\n  \n\n    )\n\n  }\n\n  export default Header;","import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport logo from './esme.jpg';\nimport './styles.css'\nfunction Homepage() {\n    return (\n<Container className=\"flex-grow-1 center-vert\">\n  <Row className=\"border border-dark no-gutters\">\n    <Col sm={3}> <img src={logo} alt=\"my face\" className=\"img-fluid\"/></Col>\n    <Col sm={9} className=\"p-1\">I am 28 years old woman who has spent the last 7.5 years working as trauma medical assistant for Sonoran Orthopaedic Trauma surgeons. Fresh out of school I was nervous to start in Trauma but through hard work and dedication I was promoted to Medical Assistant coordinator and have helped the practice establish their satellite offices around the valley. The job itself is very rewarding but I wanted a new challenge and coding is providing just that. I have now finished the coding bootcamp from UofA. It has not been easy but through hard work and perseverance I prevailed once again. rodriguezesme24@gmail.com 602.881.8945\n602.881.8945</Col>\n  </Row>\n  </Container>\n    )\n   \n    }\n  \nexport default Homepage;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from \"./components/Header\"\nimport Homepage from \"./components/Homepage\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n  return (\n    <>\n      <Header/>\n      <Homepage/>\n      </>\n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}